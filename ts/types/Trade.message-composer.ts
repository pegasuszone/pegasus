/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { InstantiateMsg, ExpiryRange, ExecuteMsg, Timestamp, Uint64, Uint128, Coin, TokenMsg, QueryMsg, SudoMsg, Addr, OfferResponse, Offer, Token, Royalty, OffersResponse, ParamsResponse, SudoParams } from "./Trade.types";
export interface TradeMessage {
  contractAddress: string;
  sender: string;
  createOffer: ({
    expiresAt,
    message,
    offeredBalances,
    offeredNfts,
    peer,
    wantedNfts
  }: {
    expiresAt?: Timestamp;
    message?: string;
    offeredBalances: Coin[];
    offeredNfts: TokenMsg[];
    peer: string;
    wantedNfts: TokenMsg[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeOffer: ({
    id
  }: {
    id: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  acceptOffer: ({
    id
  }: {
    id: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  rejectOffer: ({
    id
  }: {
    id: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  removeStaleOffer: ({
    id
  }: {
    id: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class TradeMessageComposer implements TradeMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createOffer = this.createOffer.bind(this);
    this.removeOffer = this.removeOffer.bind(this);
    this.acceptOffer = this.acceptOffer.bind(this);
    this.rejectOffer = this.rejectOffer.bind(this);
    this.removeStaleOffer = this.removeStaleOffer.bind(this);
  }

  createOffer = ({
    expiresAt,
    message,
    offeredBalances,
    offeredNfts,
    peer,
    wantedNfts
  }: {
    expiresAt?: Timestamp;
    message?: string;
    offeredBalances: Coin[];
    offeredNfts: TokenMsg[];
    peer: string;
    wantedNfts: TokenMsg[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          create_offer: {
            expires_at: expiresAt,
            message,
            offered_balances: offeredBalances,
            offered_nfts: offeredNfts,
            peer,
            wanted_nfts: wantedNfts
          }
        })),
        funds
      })
    };
  };
  removeOffer = ({
    id
  }: {
    id: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_offer: {
            id
          }
        })),
        funds
      })
    };
  };
  acceptOffer = ({
    id
  }: {
    id: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          accept_offer: {
            id
          }
        })),
        funds
      })
    };
  };
  rejectOffer = ({
    id
  }: {
    id: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          reject_offer: {
            id
          }
        })),
        funds
      })
    };
  };
  removeStaleOffer = ({
    id
  }: {
    id: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          remove_stale_offer: {
            id
          }
        })),
        funds
      })
    };
  };
}