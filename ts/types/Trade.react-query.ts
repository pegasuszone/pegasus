/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery, useMutation, UseMutationOptions } from "@tanstack/react-query";
import { ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExpiryRange, ExecuteMsg, Timestamp, Uint64, Uint128, Coin, TokenMsg, QueryMsg, SudoMsg, Addr, OfferResponse, Offer, Token, Royalty, OffersResponse, ParamsResponse, SudoParams } from "./Trade.types";
import { TradeQueryClient, TradeClient } from "./Trade.client";
export const tradeQueryKeys = {
  contract: ([{
    contract: "trade"
  }] as const),
  address: (contractAddress: string | undefined) => ([{ ...tradeQueryKeys.contract[0],
    address: contractAddress
  }] as const),
  offer: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tradeQueryKeys.address(contractAddress)[0],
    method: "offer",
    args
  }] as const),
  offersBySender: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tradeQueryKeys.address(contractAddress)[0],
    method: "offers_by_sender",
    args
  }] as const),
  offersByPeer: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tradeQueryKeys.address(contractAddress)[0],
    method: "offers_by_peer",
    args
  }] as const),
  params: (contractAddress: string | undefined, args?: Record<string, unknown>) => ([{ ...tradeQueryKeys.address(contractAddress)[0],
    method: "params",
    args
  }] as const)
};
export interface TradeReactQuery<TResponse, TData = TResponse> {
  client: TradeQueryClient | undefined;
  options?: Omit<UseQueryOptions<TResponse, Error, TData>, "'queryKey' | 'queryFn' | 'initialData'"> & {
    initialData?: undefined;
  };
}
export interface TradeParamsQuery<TData> extends TradeReactQuery<ParamsResponse, TData> {}
export function useTradeParamsQuery<TData = ParamsResponse>({
  client,
  options
}: TradeParamsQuery<TData>) {
  return useQuery<ParamsResponse, Error, TData>(tradeQueryKeys.params(client?.contractAddress), () => client ? client.params() : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TradeOffersByPeerQuery<TData> extends TradeReactQuery<OffersResponse, TData> {
  args: {
    peer: string;
  };
}
export function useTradeOffersByPeerQuery<TData = OffersResponse>({
  client,
  args,
  options
}: TradeOffersByPeerQuery<TData>) {
  return useQuery<OffersResponse, Error, TData>(tradeQueryKeys.offersByPeer(client?.contractAddress, args), () => client ? client.offersByPeer({
    peer: args.peer
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TradeOffersBySenderQuery<TData> extends TradeReactQuery<OffersResponse, TData> {
  args: {
    sender: string;
  };
}
export function useTradeOffersBySenderQuery<TData = OffersResponse>({
  client,
  args,
  options
}: TradeOffersBySenderQuery<TData>) {
  return useQuery<OffersResponse, Error, TData>(tradeQueryKeys.offersBySender(client?.contractAddress, args), () => client ? client.offersBySender({
    sender: args.sender
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TradeOfferQuery<TData> extends TradeReactQuery<OfferResponse, TData> {
  args: {
    id: number;
  };
}
export function useTradeOfferQuery<TData = OfferResponse>({
  client,
  args,
  options
}: TradeOfferQuery<TData>) {
  return useQuery<OfferResponse, Error, TData>(tradeQueryKeys.offer(client?.contractAddress, args), () => client ? client.offer({
    id: args.id
  }) : Promise.reject(new Error("Invalid client")), { ...options,
    enabled: !!client && (options?.enabled != undefined ? options.enabled : true)
  });
}
export interface TradeRemoveStaleOfferMutation {
  client: TradeClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTradeRemoveStaleOfferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TradeRemoveStaleOfferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TradeRemoveStaleOfferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeStaleOffer(msg, fee, memo, funds), options);
}
export interface TradeRejectOfferMutation {
  client: TradeClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTradeRejectOfferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TradeRejectOfferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TradeRejectOfferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.rejectOffer(msg, fee, memo, funds), options);
}
export interface TradeAcceptOfferMutation {
  client: TradeClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTradeAcceptOfferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TradeAcceptOfferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TradeAcceptOfferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.acceptOffer(msg, fee, memo, funds), options);
}
export interface TradeRemoveOfferMutation {
  client: TradeClient;
  msg: {
    id: number;
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTradeRemoveOfferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TradeRemoveOfferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TradeRemoveOfferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.removeOffer(msg, fee, memo, funds), options);
}
export interface TradeCreateOfferMutation {
  client: TradeClient;
  msg: {
    expiresAt?: Timestamp;
    message?: string;
    offeredBalances: Coin[];
    offeredNfts: TokenMsg[];
    peer: string;
    wantedNfts: TokenMsg[];
  };
  args?: {
    fee?: number | StdFee | "auto";
    memo?: string;
    funds?: Coin[];
  };
}
export function useTradeCreateOfferMutation(options?: Omit<UseMutationOptions<ExecuteResult, Error, TradeCreateOfferMutation>, "mutationFn">) {
  return useMutation<ExecuteResult, Error, TradeCreateOfferMutation>(({
    client,
    msg,
    args: {
      fee,
      memo,
      funds
    } = {}
  }) => client.createOffer(msg, fee, memo, funds), options);
}