{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "InstantiateMsg",
  "type": "object",
  "required": [
    "bundle_limit",
    "escrow_deposit_amount",
    "maintainer",
    "max_offers",
    "offer_expiry",
    "removal_reward_bps"
  ],
  "properties": {
    "bundle_limit": {
      "description": "Maximum amount of NFTs in bundle",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "escrow_deposit_amount": {
      "description": "Amount in micros to be deposited by the sender of an offer This escrow will be refunded when the offer is accepted or denied The sender will lose this deposit if they let the offer expire",
      "allOf": [
        {
          "$ref": "#/definitions/Uint128"
        }
      ]
    },
    "maintainer": {
      "description": "Developer address",
      "type": "string"
    },
    "max_offers": {
      "description": "Maximum amount of offers that can be sent by a user",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    },
    "offer_expiry": {
      "description": "Valid time range for Offers (min, max) in seconds",
      "allOf": [
        {
          "$ref": "#/definitions/ExpiryRange"
        }
      ]
    },
    "removal_reward_bps": {
      "description": "Stale trade removal reward",
      "type": "integer",
      "format": "uint64",
      "minimum": 0.0
    }
  },
  "definitions": {
    "ExpiryRange": {
      "type": "object",
      "required": [
        "max",
        "min"
      ],
      "properties": {
        "max": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        },
        "min": {
          "type": "integer",
          "format": "uint64",
          "minimum": 0.0
        }
      }
    },
    "Uint128": {
      "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
      "type": "string"
    }
  }
}
