{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "Create a new offer",
      "type": "object",
      "required": [
        "create_offer"
      ],
      "properties": {
        "create_offer": {
          "type": "object",
          "required": [
            "offered_nfts",
            "peer",
            "wanted_nfts"
          ],
          "properties": {
            "expires_at": {
              "anyOf": [
                {
                  "$ref": "#/definitions/Timestamp"
                },
                {
                  "type": "null"
                }
              ]
            },
            "offered_nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenMsg"
              }
            },
            "peer": {
              "type": "string"
            },
            "wanted_nfts": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TokenMsg"
              }
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove an offer (called by sender)",
      "type": "object",
      "required": [
        "remove_offer"
      ],
      "properties": {
        "remove_offer": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept an existing offer (called by peer)",
      "type": "object",
      "required": [
        "accept_offer"
      ],
      "properties": {
        "accept_offer": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Reject an existing offer (called by peer)",
      "type": "object",
      "required": [
        "reject_offer"
      ],
      "properties": {
        "reject_offer": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Operation to remove stale offers (called by anyone & incentivized)",
      "type": "object",
      "required": [
        "remove_stale_offer"
      ],
      "properties": {
        "remove_stale_offer": {
          "type": "object",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "integer",
              "format": "uint8",
              "minimum": 0.0
            }
          }
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "TokenMsg": {
      "type": "object",
      "required": [
        "collection",
        "token_id"
      ],
      "properties": {
        "collection": {
          "type": "string"
        },
        "token_id": {
          "type": "integer",
          "format": "uint32",
          "minimum": 0.0
        }
      }
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
